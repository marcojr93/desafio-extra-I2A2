import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots

def render(df):
    """
    Renderiza a aba de An√°lise Explorat√≥ria de Dados (EDA)
    """
    st.header("üîç An√°lise Explorat√≥ria de Dados")
    
    if df is None or df.empty:
        st.warning("Nenhum dado carregado. Por favor, fa√ßa o upload de um arquivo CSV.")
        return
    
    # Se√ß√£o 1: Vis√£o Geral dos Dados
    st.subheader("üìã Vis√£o Geral dos Dados")
    
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.metric("N√∫mero de Linhas", df.shape[0])
    with col2:
        st.metric("N√∫mero de Colunas", df.shape[1])
    with col3:
        st.metric("Valores Ausentes", df.isnull().sum().sum())
    with col4:
        st.metric("Duplicatas", df.duplicated().sum())
    
    # Mostrar primeiras linhas
    st.subheader("üìä Primeiras 10 Linhas dos Dados")
    st.dataframe(df.head(10))
    
    # Bot√£o para adicionar vis√£o geral ao relat√≥rio
    if st.button("üìå Adicionar Vis√£o Geral ao Relat√≥rio", key="add_overview"):
        overview_content = f"""
**Vis√£o Geral do Dataset:**
- N√∫mero de linhas: {df.shape[0]:,}
- N√∫mero de colunas: {df.shape[1]}
- Valores ausentes: {df.isnull().sum().sum()}
- Registros duplicados: {df.duplicated().sum()}
- Colunas: {', '.join(df.columns.tolist())}
        """
        
        item_para_adicionar = {
            "type": "eda",
            "category": "visao_geral", 
            "title": "Vis√£o Geral do Dataset",
            "content": overview_content
        }
        
        if item_para_adicionar not in st.session_state.report_items:
            st.session_state.report_items.append(item_para_adicionar)
            st.success("‚úÖ Vis√£o geral adicionada ao relat√≥rio!")
            st.rerun()
        else:
            st.warning("‚ö†Ô∏è Este item j√° foi adicionado ao relat√≥rio.")
    
    # Se√ß√£o 2: Tipos de Dados
    st.subheader("üîß Tipos de Dados")
    
    # An√°lise dos tipos de dados
    numeric_cols = df.select_dtypes(include=[np.number]).columns.tolist()
    categorical_cols = df.select_dtypes(include=['object', 'category']).columns.tolist()
    datetime_cols = df.select_dtypes(include=['datetime64']).columns.tolist()
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.write("**Vari√°veis Num√©ricas:**")
        if numeric_cols:
            for col in numeric_cols:
                st.write(f"‚Ä¢ {col} ({df[col].dtype})")
        else:
            st.write("Nenhuma vari√°vel num√©rica encontrada")
            
        st.write("**Vari√°veis de Data/Hora:**")
        if datetime_cols:
            for col in datetime_cols:
                st.write(f"‚Ä¢ {col} ({df[col].dtype})")
        else:
            st.write("Nenhuma vari√°vel de data/hora encontrada")
    
    with col2:
        st.write("**Vari√°veis Categ√≥ricas:**")
        if categorical_cols:
            for col in categorical_cols:
                unique_values = df[col].nunique()
                st.write(f"‚Ä¢ {col} ({unique_values} valores √∫nicos)")
        else:
            st.write("Nenhuma vari√°vel categ√≥rica encontrada")
    
    # Tabela detalhada de tipos
    st.subheader("üìù Detalhes dos Tipos de Dados")
    tipos_df = pd.DataFrame({
        'Coluna': df.columns,
        'Tipo': df.dtypes,
        'Valores √önicos': df.nunique(),
        'Valores Ausentes': df.isnull().sum(),
        'Porcentagem Ausentes (%)': (df.isnull().sum() / len(df) * 100).round(2)
    })
    st.dataframe(tipos_df)
    
    # Se√ß√£o 3: An√°lise de Vari√°veis Num√©ricas
    if numeric_cols:
        st.subheader("üìà An√°lise de Vari√°veis Num√©ricas")
        
        # Estat√≠sticas descritivas
        st.write("**Estat√≠sticas Descritivas:**")
        desc_stats = df[numeric_cols].describe()
        st.dataframe(desc_stats)
        
        # Bot√£o para adicionar estat√≠sticas ao relat√≥rio
        if st.button("üìå Adicionar Estat√≠sticas Descritivas ao Relat√≥rio", key="add_desc_stats"):
            stats_content = f"""
**Estat√≠sticas Descritivas das Vari√°veis Num√©ricas:**

{desc_stats.to_string()}

**Observa√ß√µes:**
- {len(numeric_cols)} vari√°veis num√©ricas analisadas
- Vari√°veis: {', '.join(numeric_cols)}
            """
            
            item_para_adicionar = {
                "type": "eda",
                "category": "estatisticas_descritivas",
                "title": "Estat√≠sticas Descritivas",
                "content": stats_content
            }
            
            if item_para_adicionar not in st.session_state.report_items:
                st.session_state.report_items.append(item_para_adicionar)
                st.success("‚úÖ Estat√≠sticas descritivas adicionadas ao relat√≥rio!")
                st.rerun()
            else:
                st.warning("‚ö†Ô∏è Este item j√° foi adicionado ao relat√≥rio.")
        
        # Medidas adicionais
        st.write("**Medidas Adicionais de Tend√™ncia Central e Variabilidade:**")
        
        additional_stats = pd.DataFrame(index=numeric_cols)
        additional_stats['Vari√¢ncia'] = df[numeric_cols].var()
        additional_stats['Desvio Padr√£o'] = df[numeric_cols].std()
        additional_stats['Coef. Varia√ß√£o (%)'] = (df[numeric_cols].std() / df[numeric_cols].mean() * 100).round(2)
        additional_stats['Assimetria'] = df[numeric_cols].skew()
        additional_stats['Curtose'] = df[numeric_cols].kurtosis()
        additional_stats['Amplitude'] = df[numeric_cols].max() - df[numeric_cols].min()
        
        st.dataframe(additional_stats)
        
        # Seletor de vari√°vel para an√°lise detalhada
        st.write("**An√°lise Detalhada por Vari√°vel:**")
        selected_numeric = st.selectbox("Selecione uma vari√°vel num√©rica para an√°lise detalhada:", numeric_cols)
        
        if selected_numeric:
            col1, col2 = st.columns(2)
            
            with col1:
                # Histograma
                fig_hist = px.histogram(
                    df, 
                    x=selected_numeric, 
                    nbins=30,
                    title=f"Distribui√ß√£o de {selected_numeric}",
                    template="plotly_white"
                )
                fig_hist.update_layout(
                    xaxis_title=selected_numeric,
                    yaxis_title="Frequ√™ncia",
                    showlegend=False
                )
                st.plotly_chart(fig_hist, use_container_width=True)
                
                # Box plot
                fig_box = px.box(
                    df, 
                    y=selected_numeric,
                    title=f"Box Plot de {selected_numeric}",
                    template="plotly_white"
                )
                st.plotly_chart(fig_box, use_container_width=True)
            
            with col2:
                # Estat√≠sticas da vari√°vel selecionada
                col_data = df[selected_numeric].dropna()
                
                st.write(f"**Estat√≠sticas de {selected_numeric}:**")
                st.write(f"‚Ä¢ **M√©dia:** {col_data.mean():.3f}")
                st.write(f"‚Ä¢ **Mediana:** {col_data.median():.3f}")
                st.write(f"‚Ä¢ **Moda:** {col_data.mode().iloc[0] if not col_data.mode().empty else 'N/A'}")
                st.write(f"‚Ä¢ **Desvio Padr√£o:** {col_data.std():.3f}")
                st.write(f"‚Ä¢ **Vari√¢ncia:** {col_data.var():.3f}")
                st.write(f"‚Ä¢ **M√≠nimo:** {col_data.min():.3f}")
                st.write(f"‚Ä¢ **M√°ximo:** {col_data.max():.3f}")
                st.write(f"‚Ä¢ **Amplitude:** {(col_data.max() - col_data.min()):.3f}")
                st.write(f"‚Ä¢ **Assimetria:** {col_data.skew():.3f}")
                st.write(f"‚Ä¢ **Curtose:** {col_data.kurtosis():.3f}")
                
                # Quartis
                st.write("**Quartis:**")
                st.write(f"‚Ä¢ **Q1 (25%):** {col_data.quantile(0.25):.3f}")
                st.write(f"‚Ä¢ **Q2 (50% - Mediana):** {col_data.quantile(0.50):.3f}")
                st.write(f"‚Ä¢ **Q3 (75%):** {col_data.quantile(0.75):.3f}")
                st.write(f"‚Ä¢ **IQR:** {(col_data.quantile(0.75) - col_data.quantile(0.25)):.3f}")
                
                # Bot√£o para adicionar an√°lise da vari√°vel ao relat√≥rio
                if st.button(f"üìå Adicionar An√°lise de {selected_numeric} ao Relat√≥rio", key=f"add_var_analysis_{selected_numeric}"):
                    var_analysis_content = f"""
**An√°lise Detalhada da Vari√°vel: {selected_numeric}**

**Estat√≠sticas Principais:**
- M√©dia: {col_data.mean():.3f}
- Mediana: {col_data.median():.3f}
- Desvio Padr√£o: {col_data.std():.3f}
- M√≠nimo: {col_data.min():.3f}
- M√°ximo: {col_data.max():.3f}
- Amplitude: {(col_data.max() - col_data.min()):.3f}
- Assimetria: {col_data.skew():.3f}
- Curtose: {col_data.kurtosis():.3f}

**Quartis:**
- Q1 (25%): {col_data.quantile(0.25):.3f}
- Q2 (Mediana): {col_data.quantile(0.50):.3f}  
- Q3 (75%): {col_data.quantile(0.75):.3f}
- IQR: {(col_data.quantile(0.75) - col_data.quantile(0.25)):.3f}
                    """
                    
                    item_para_adicionar = {
                        "type": "eda",
                        "category": "analise_variavel",
                        "title": f"An√°lise Detalhada: {selected_numeric}",
                        "content": var_analysis_content
                    }
                    
                    if item_para_adicionar not in st.session_state.report_items:
                        st.session_state.report_items.append(item_para_adicionar)
                        st.success(f"‚úÖ An√°lise de {selected_numeric} adicionada ao relat√≥rio!")
                        st.rerun()
                    else:
                        st.warning("‚ö†Ô∏è Esta an√°lise j√° foi adicionada ao relat√≥rio.")
        
        # Matriz de correla√ß√£o
        if len(numeric_cols) > 1:
            st.write("**Matriz de Correla√ß√£o:**")
            corr_matrix = df[numeric_cols].corr()
            
            fig_corr = px.imshow(
                corr_matrix,
                text_auto=True,
                aspect="auto",
                title="Matriz de Correla√ß√£o entre Vari√°veis Num√©ricas",
                template="plotly_white",
                color_continuous_scale="RdBu"
            )
            st.plotly_chart(fig_corr, use_container_width=True)
            
            # Bot√£o para adicionar matriz de correla√ß√£o ao relat√≥rio
            if st.button("üìå Adicionar Matriz de Correla√ß√£o ao Relat√≥rio", key="add_correlation"):
                # Encontrar as correla√ß√µes mais altas
                corr_pairs = []
                for i in range(len(numeric_cols)):
                    for j in range(i+1, len(numeric_cols)):
                        corr_val = corr_matrix.iloc[i, j]
                        corr_pairs.append((numeric_cols[i], numeric_cols[j], corr_val))
                
                # Ordenar por valor absoluto da correla√ß√£o
                corr_pairs.sort(key=lambda x: abs(x[2]), reverse=True)
                
                correlation_content = f"""
**An√°lise de Correla√ß√£o entre Vari√°veis Num√©ricas**

**Correla√ß√µes mais significativas (top 5):**
"""
                for i, (var1, var2, corr_val) in enumerate(corr_pairs[:5], 1):
                    correlation_content += f"\n{i}. **{var1}** ‚Üî **{var2}**: {corr_val:.3f}"
                
                correlation_content += f"""

**Observa√ß√µes:**
- Correla√ß√£o pr√≥xima de +1: Correla√ß√£o positiva forte
- Correla√ß√£o pr√≥xima de -1: Correla√ß√£o negativa forte  
- Correla√ß√£o pr√≥xima de 0: Sem correla√ß√£o linear
- Total de {len(numeric_cols)} vari√°veis num√©ricas analisadas
                """
                
                item_para_adicionar = {
                    "type": "eda",
                    "category": "correlacao",
                    "title": "An√°lise de Correla√ß√£o",
                    "content": correlation_content
                }
                
                if item_para_adicionar not in st.session_state.report_items:
                    st.session_state.report_items.append(item_para_adicionar)
                    st.success("‚úÖ An√°lise de correla√ß√£o adicionada ao relat√≥rio!")
                    st.rerun()
                else:
                    st.warning("‚ö†Ô∏è Esta an√°lise j√° foi adicionada ao relat√≥rio.")
    
    # Se√ß√£o 4: An√°lise de Vari√°veis Categ√≥ricas
    if categorical_cols:
        st.subheader("üìä An√°lise de Vari√°veis Categ√≥ricas")
        
        selected_categorical = st.selectbox("Selecione uma vari√°vel categ√≥rica para an√°lise:", categorical_cols)
        
        if selected_categorical:
            col1, col2 = st.columns(2)
            
            with col1:
                # Contagem de valores
                value_counts = df[selected_categorical].value_counts()
                
                # Gr√°fico de barras
                fig_bar = px.bar(
                    x=value_counts.index,
                    y=value_counts.values,
                    title=f"Frequ√™ncia de {selected_categorical}",
                    template="plotly_white"
                )
                fig_bar.update_layout(
                    xaxis_title=selected_categorical,
                    yaxis_title="Frequ√™ncia"
                )
                st.plotly_chart(fig_bar, use_container_width=True)
            
            with col2:
                # Gr√°fico de pizza
                fig_pie = px.pie(
                    values=value_counts.values,
                    names=value_counts.index,
                    title=f"Distribui√ß√£o de {selected_categorical}",
                    template="plotly_white"
                )
                st.plotly_chart(fig_pie, use_container_width=True)
            
            # Tabela de frequ√™ncias
            st.write(f"**Tabela de Frequ√™ncias - {selected_categorical}:**")
            freq_table = pd.DataFrame({
                'Valor': value_counts.index,
                'Frequ√™ncia': value_counts.values,
                'Porcentagem (%)': (value_counts.values / value_counts.sum() * 100).round(2)
            })
            st.dataframe(freq_table)
    
    # Se√ß√£o 5: An√°lise de Valores Ausentes
    st.subheader("üï≥Ô∏è An√°lise de Valores Ausentes")
    
    missing_data = df.isnull().sum()
    missing_percent = (missing_data / len(df)) * 100
    
    if missing_data.sum() > 0:
        missing_df = pd.DataFrame({
            'Coluna': missing_data.index,
            'Valores Ausentes': missing_data.values,
            'Porcentagem (%)': missing_percent.values.round(2)
        })
        missing_df = missing_df[missing_df['Valores Ausentes'] > 0].sort_values('Valores Ausentes', ascending=False)
        
        if not missing_df.empty:
            # Gr√°fico de valores ausentes
            fig_missing = px.bar(
                missing_df,
                x='Coluna',
                y='Valores Ausentes',
                title="Valores Ausentes por Coluna",
                template="plotly_white"
            )
            st.plotly_chart(fig_missing, use_container_width=True)
            
            # Tabela de valores ausentes
            st.dataframe(missing_df)
        else:
            st.success("üéâ N√£o h√° valores ausentes no dataset!")
    else:
        st.success("üéâ N√£o h√° valores ausentes no dataset!")
    
    # Se√ß√£o 6: An√°lise de Outliers
    if numeric_cols:
        st.subheader("üéØ An√°lise de Outliers")
        
        selected_outlier_col = st.selectbox("Selecione uma vari√°vel para an√°lise de outliers:", numeric_cols, key="outlier_analysis")
        
        if selected_outlier_col:
            col_data = df[selected_outlier_col].dropna()
            
            # C√°lculo de outliers usando IQR
            Q1 = col_data.quantile(0.25)
            Q3 = col_data.quantile(0.75)
            IQR = Q3 - Q1
            lower_bound = Q1 - 1.5 * IQR
            upper_bound = Q3 + 1.5 * IQR
            
            outliers = col_data[(col_data < lower_bound) | (col_data > upper_bound)]
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.metric("N√∫mero de Outliers", len(outliers))
                st.metric("Porcentagem de Outliers (%)", f"{(len(outliers)/len(col_data)*100):.2f}%")
                st.write(f"**Limites para Outliers:**")
                st.write(f"‚Ä¢ Limite Inferior: {lower_bound:.3f}")
                st.write(f"‚Ä¢ Limite Superior: {upper_bound:.3f}")
            
            with col2:
                if len(outliers) > 0:
                    st.write("**Valores dos Outliers:**")
                    outlier_df = pd.DataFrame({
                        '√çndice': outliers.index,
                        'Valor': outliers.values
                    })
                    st.dataframe(outlier_df.head(10))  # Mostrar apenas os primeiros 10
                    if len(outliers) > 10:
                        st.write(f"... e mais {len(outliers) - 10} outliers")
    
    # Se√ß√£o 7: Resumo Final
    st.subheader("üìã Resumo da An√°lise")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.write("**Caracter√≠sticas do Dataset:**")
        st.write(f"‚Ä¢ Total de registros: {df.shape[0]:,}")
        st.write(f"‚Ä¢ Total de vari√°veis: {df.shape[1]}")
        st.write(f"‚Ä¢ Vari√°veis num√©ricas: {len(numeric_cols)}")
        st.write(f"‚Ä¢ Vari√°veis categ√≥ricas: {len(categorical_cols)}")
        st.write(f"‚Ä¢ Vari√°veis de data/hora: {len(datetime_cols)}")
        
    with col2:
        st.write("**Qualidade dos Dados:**")
        completude = (1 - df.isnull().sum().sum() / (df.shape[0] * df.shape[1])) * 100
        st.write(f"‚Ä¢ Completude: {completude:.1f}%")
        st.write(f"‚Ä¢ Registros duplicados: {df.duplicated().sum():,}")
        st.write(f"‚Ä¢ Valores √∫nicos totais: {df.nunique().sum():,}")
        
        if numeric_cols:
            avg_skewness = abs(df[numeric_cols].skew()).mean()
            if avg_skewness < 0.5:
                skew_desc = "Baixa"
            elif avg_skewness < 1:
                skew_desc = "Moderada"
            else:
                skew_desc = "Alta"
            st.write(f"‚Ä¢ Assimetria m√©dia: {skew_desc} ({avg_skewness:.2f})")
    
    # Se√ß√£o 8: Recomenda√ß√µes
    st.subheader("üí° Recomenda√ß√µes")
    
    recomendacoes = []
    
    # Verificar valores ausentes
    if df.isnull().sum().sum() > 0:
        missing_percent_total = (df.isnull().sum().sum() / (df.shape[0] * df.shape[1])) * 100
        if missing_percent_total > 5:
            recomendacoes.append("üî¥ Alto percentual de valores ausentes detectado. Considere estrat√©gias de imputa√ß√£o ou remo√ß√£o.")
        else:
            recomendacoes.append("üü° Alguns valores ausentes detectados. Avalie a necessidade de tratamento.")
    else:
        recomendacoes.append("üü¢ Excelente! Nenhum valor ausente encontrado.")
    
    # Verificar duplicatas
    if df.duplicated().sum() > 0:
        recomendacoes.append("üî¥ Registros duplicados encontrados. Considere remov√™-los para evitar vi√©s na an√°lise.")
    else:
        recomendacoes.append("üü¢ Nenhum registro duplicado encontrado.")
    
    # Verificar assimetria
    if numeric_cols:
        high_skew_cols = [col for col in numeric_cols if abs(df[col].skew()) > 2]
        if high_skew_cols:
            recomendacoes.append(f"üü° Vari√°veis com alta assimetria detectadas: {', '.join(high_skew_cols)}. Considere transforma√ß√µes (log, sqrt).")
    
    # Verificar variabilidade
    if numeric_cols:
        high_cv_cols = []
        for col in numeric_cols:
            if df[col].mean() != 0:
                cv = (df[col].std() / df[col].mean()) * 100
                if cv > 100:
                    high_cv_cols.append(col)
        if high_cv_cols:
            recomendacoes.append(f"üü° Alta variabilidade detectada em: {', '.join(high_cv_cols)}. Considere normaliza√ß√£o.")
    
    for rec in recomendacoes:
        st.write(rec)
