import streamlit as st
import pandas as pd
import google.generativeai as genai
from datetime import datetime
import base64
from io import BytesIO
from reportlab.lib.pagesizes import A4, letter
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, PageBreak, Table, TableStyle
from reportlab.lib import colors
from reportlab.lib.enums import TA_CENTER, TA_LEFT, TA_JUSTIFY

def generate_report_content(df, report_items):
    """
    Gera o conte√∫do completo do relat√≥rio em markdown
    """
    report_lines = []
    
    # Cabe√ßalho do relat√≥rio
    report_lines.append("# üìä Relat√≥rio de An√°lise de Dados")
    report_lines.append(f"**Data de Gera√ß√£o:** {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
    report_lines.append(f"**Dataset:** {df.shape[0]:,} linhas √ó {df.shape[1]} colunas")
    report_lines.append("\n---\n")
    
    # Informa√ß√µes b√°sicas do dataset
    report_lines.append("## üìà Informa√ß√µes B√°sicas do Dataset")
    report_lines.append(f"- **Total de registros:** {df.shape[0]:,}")
    report_lines.append(f"- **Total de colunas:** {df.shape[1]}")
    report_lines.append(f"- **Colunas:** {', '.join(df.columns.tolist())}")
    
    # Tipos de dados
    report_lines.append("\n### üîç Tipos de Dados")
    for col, dtype in df.dtypes.items():
        report_lines.append(f"- **{col}:** {dtype}")
    
    # Estat√≠sticas b√°sicas para colunas num√©ricas
    numeric_cols = df.select_dtypes(include=['number']).columns
    if len(numeric_cols) > 0:
        report_lines.append("\n### üìä Estat√≠sticas Descritivas")
        stats_df = df[numeric_cols].describe()
        report_lines.append("```")
        report_lines.append(stats_df.to_string())
        report_lines.append("```")
    
    report_lines.append("\n---\n")
    
    # Itens adicionados pelo usu√°rio
    if report_items:
        report_lines.append("## üéØ An√°lises e Insights")
        
        for i, item in enumerate(report_items, 1):
            report_lines.append(f"\n### {i}. {item.get('title', 'An√°lise')}")
            
            if item['type'] == 'qa':
                # Item de Q&A do chatbot
                content = item['content']
                report_lines.append(f"**Pergunta:** {content['pergunta']}")
                report_lines.append(f"**Resposta:** {content['resposta']}")
                
            elif item['type'] == 'eda':
                # Item de an√°lise explorat√≥ria
                report_lines.append(f"**Categoria:** {item.get('category', 'EDA')}")
                if 'content' in item:
                    if isinstance(item['content'], str):
                        report_lines.append(item['content'])
                    else:
                        report_lines.append(str(item['content']))
            
            report_lines.append("")  # Linha em branco entre itens
    
    else:
        report_lines.append("## üìù Nenhuma An√°lise Adicionada")
        report_lines.append("Adicione an√°lises do chatbot ou da EDA para inclu√≠-las no relat√≥rio.")
    
    # Rodap√©
    report_lines.append("\n---")
    report_lines.append("*Relat√≥rio gerado automaticamente pelo EDA Chatbot - Sistema de an√°lise de dados*")
    
    return "\n".join(report_lines)

def generate_pdf_report(df, report_items):
    """
    Gera um relat√≥rio em PDF usando ReportLab
    """
    buffer = BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=A4, rightMargin=72, leftMargin=72, topMargin=72, bottomMargin=18)
    
    # Estilos
    styles = getSampleStyleSheet()
    title_style = ParagraphStyle(
        'CustomTitle',
        parent=styles['Heading1'],
        fontSize=20,
        spaceAfter=30,
        alignment=TA_CENTER,
        textColor=colors.HexColor('#1f77b4')
    )
    
    heading2_style = ParagraphStyle(
        'CustomHeading2',
        parent=styles['Heading2'],
        fontSize=14,
        spaceAfter=12,
        spaceBefore=20,
        textColor=colors.HexColor('#2c3e50')
    )
    
    heading3_style = ParagraphStyle(
        'CustomHeading3',
        parent=styles['Heading3'],
        fontSize=12,
        spaceAfter=8,
        spaceBefore=15,
        textColor=colors.HexColor('#34495e')
    )
    
    normal_style = ParagraphStyle(
        'CustomNormal',
        parent=styles['Normal'],
        fontSize=10,
        spaceAfter=8,
        alignment=TA_JUSTIFY
    )
    
    # Conte√∫do do PDF
    story = []
    
    # T√≠tulo
    story.append(Paragraph("üìä Relat√≥rio de An√°lise de Dados", title_style))
    story.append(Spacer(1, 12))
    
    # Informa√ß√µes b√°sicas
    timestamp = datetime.now().strftime('%d/%m/%Y %H:%M:%S')
    story.append(Paragraph(f"<b>Data de Gera√ß√£o:</b> {timestamp}", normal_style))
    story.append(Paragraph(f"<b>Dataset:</b> {df.shape[0]:,} linhas √ó {df.shape[1]} colunas", normal_style))
    story.append(Spacer(1, 20))
    
    # Informa√ß√µes b√°sicas do dataset
    story.append(Paragraph("üìà Informa√ß√µes B√°sicas do Dataset", heading2_style))
    
    # Tabela com informa√ß√µes b√°sicas
    basic_data = [
        ['M√©trica', 'Valor'],
        ['Total de registros', f"{df.shape[0]:,}"],
        ['Total de colunas', str(df.shape[1])],
        ['Valores ausentes', str(df.isnull().sum().sum())],
        ['Registros duplicados', str(df.duplicated().sum())]
    ]
    
    basic_table = Table(basic_data, colWidths=[2.5*inch, 2*inch])
    basic_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#3498db')),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, 0), 12),
        ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
        ('FONTSIZE', (0, 1), (-1, -1), 10),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('GRID', (0, 0), (-1, -1), 1, colors.black)
    ]))
    
    story.append(basic_table)
    story.append(Spacer(1, 20))
    
    # Colunas do dataset
    story.append(Paragraph("üîç Colunas do Dataset", heading3_style))
    columns_text = ", ".join(df.columns.tolist())
    story.append(Paragraph(f"<b>Colunas ({len(df.columns)}):</b> {columns_text}", normal_style))
    story.append(Spacer(1, 15))
    
    # Tipos de dados - apenas para colunas num√©ricas (evitar problemas de renderiza√ß√£o)
    numeric_cols = df.select_dtypes(include=['number']).columns
    if len(numeric_cols) > 0:
        story.append(Paragraph("üìä Estat√≠sticas Descritivas (Vari√°veis Num√©ricas)", heading3_style))
        
        # Criar tabela de estat√≠sticas resumida
        stats_df = df[numeric_cols].describe()
        
        # Pegar apenas algumas estat√≠sticas principais
        stats_data = [['Coluna', 'M√©dia', 'Mediana', 'Desvio Padr√£o', 'Min', 'Max']]
        
        for col in numeric_cols[:10]:  # Limitar a 10 colunas para n√£o sobrecarregar
            if col in stats_df.columns:
                stats_data.append([
                    col,
                    f"{stats_df.loc['mean', col]:.2f}",
                    f"{stats_df.loc['50%', col]:.2f}",
                    f"{stats_df.loc['std', col]:.2f}",
                    f"{stats_df.loc['min', col]:.2f}",
                    f"{stats_df.loc['max', col]:.2f}"
                ])
        
        stats_table = Table(stats_data, colWidths=[1.2*inch, 0.8*inch, 0.8*inch, 0.8*inch, 0.8*inch, 0.8*inch])
        stats_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#2ecc71')),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 9),
            ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
            ('FONTSIZE', (0, 1), (-1, -1), 8),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('GRID', (0, 0), (-1, -1), 1, colors.black)
        ]))
        
        story.append(stats_table)
        story.append(Spacer(1, 20))
    
    # Itens adicionados pelo usu√°rio
    if report_items:
        story.append(PageBreak())
        story.append(Paragraph("üéØ An√°lises e Insights", heading2_style))
        
        for i, item in enumerate(report_items, 1):
            story.append(Paragraph(f"{i}. {item.get('title', 'An√°lise')}", heading3_style))
            
            if item['type'] == 'qa':
                # Item de Q&A do chatbot
                content = item['content']
                story.append(Paragraph(f"<b>Pergunta:</b> {content['pergunta']}", normal_style))
                story.append(Paragraph(f"<b>Resposta:</b> {content['resposta']}", normal_style))
                
            elif item['type'] == 'eda':
                # Item de an√°lise explorat√≥ria
                story.append(Paragraph(f"<b>Categoria:</b> {item.get('category', 'EDA')}", normal_style))
                if 'content' in item:
                    content_text = str(item['content']).replace('\n', '<br/>')
                    story.append(Paragraph(content_text, normal_style))
            
            story.append(Spacer(1, 15))
    
    # Rodap√©
    story.append(Spacer(1, 30))
    story.append(Paragraph("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ", normal_style))
    story.append(Paragraph("<i>Relat√≥rio gerado automaticamente pelo EDA Chatbot - Sistema de Analise de dados</i>", 
                          ParagraphStyle('Footer', parent=styles['Normal'], fontSize=8, alignment=TA_CENTER, 
                                       textColor=colors.HexColor('#7f8c8d'))))
    
    # Construir o PDF
    doc.build(story)
    buffer.seek(0)
    return buffer

def create_download_link(content, filename):
    """
    Cria um link de download para o conte√∫do fornecido
    """
    b64 = base64.b64encode(content.encode()).decode()
    href = f'<a href="data:text/markdown;base64,{b64}" download="{filename}">üì• Download {filename}</a>'
    return href

def render(df):
    """
    Renderiza a aba de Relat√≥rios com funcionalidade de download
    """
    st.header("üìä Relat√≥rio de An√°lise")
    
    # Verificar se h√° itens no relat√≥rio
    if not st.session_state.report_items:
        st.info("üìù **Nenhum item adicionado ao relat√≥rio ainda.**")
        st.markdown("""
        **Como adicionar itens ao relat√≥rio:**
        1. V√° para a aba **üí¨ Chatbot** e fa√ßa perguntas sobre os dados
        2. Clique no bot√£o **üìå Adicionar ao Relat√≥rio** nas respostas interessantes
        3. V√° para a aba **üñ•Ô∏è An√°lise Explorat√≥ria** e explore os gr√°ficos
        4. Adicione visualiza√ß√µes relevantes ao relat√≥rio
        5. Volte aqui para gerar e baixar o relat√≥rio completo
        """)
    else:
        st.success(f"‚úÖ **{len(st.session_state.report_items)} itens** adicionados ao relat√≥rio")
    
    # Mostrar pr√©via dos itens
    if st.session_state.report_items:
        with st.expander("üëÅÔ∏è Pr√©via dos Itens do Relat√≥rio", expanded=True):
            for i, item in enumerate(st.session_state.report_items, 1):
                st.markdown(f"**{i}. {item.get('title', 'Item sem t√≠tulo')}**")
                st.caption(f"Tipo: {item.get('type', 'desconhecido')} | Categoria: {item.get('category', 'geral')}")
                
                if item['type'] == 'qa' and 'content' in item:
                    st.info(f"P: {item['content']['pergunta']}")
                    st.success(f"R: {item['content']['resposta'][:100]}...")
                st.divider()
    
    # Se√ß√£o de gera√ß√£o do relat√≥rio
    st.subheader("üìÑ Gerar Relat√≥rio")
    
    col1, col2 = st.columns(2)
    
    with col1:
        # Op√ß√µes de formato
        format_option = st.selectbox(
            "üìã Formato do Relat√≥rio:",
            ["Markdown (.md)", "Texto (.txt)", "PDF (.pdf)"]
        )
    
    with col2:
        # Op√ß√µes de conte√∫do
        include_basic_stats = st.checkbox("Incluir estat√≠sticas b√°sicas", value=True)
    
    # Bot√£o para gerar relat√≥rio
    if st.button("üîÑ Gerar Relat√≥rio", type="primary"):
        with st.spinner("Gerando relat√≥rio..."):
            # Definir nome do arquivo
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            
            if format_option == "PDF (.pdf)":
                # Gerar PDF
                filename = f"relatorio_eda_{timestamp}.pdf"
                pdf_content = generate_pdf_report(df, st.session_state.report_items)
                
                # Armazenar o conte√∫do PDF na sess√£o
                st.session_state.report_content = pdf_content
                st.session_state.report_filename = filename
                st.session_state.report_format = "pdf"
            else:
                # Gerar conte√∫do de texto/markdown
                report_content = generate_report_content(df, st.session_state.report_items)
                
                if format_option == "Markdown (.md)":
                    filename = f"relatorio_eda_{timestamp}.md"
                else:
                    filename = f"relatorio_eda_{timestamp}.txt"
                
                # Armazenar o conte√∫do na sess√£o para download
                st.session_state.report_content = report_content
                st.session_state.report_filename = filename
                st.session_state.report_format = "text"
            
            st.success("‚úÖ Relat√≥rio gerado com sucesso!")
    
    # Mostrar pr√©via e download se o relat√≥rio foi gerado
    if hasattr(st.session_state, 'report_content'):
        st.subheader("üëÅÔ∏è Pr√©via do Relat√≥rio")
        
        # Verificar formato do relat√≥rio
        report_format = getattr(st.session_state, 'report_format', 'text')
        
        if report_format == "pdf":
            # Para PDF, mostrar informa√ß√£o em vez de conte√∫do
            st.info("üìÑ Relat√≥rio PDF gerado com sucesso! Use o bot√£o de download para baixar o arquivo.")
            st.warning("‚ö†Ô∏è A pr√©via n√£o est√° dispon√≠vel para arquivos PDF. Baixe o arquivo para visualizar o conte√∫do.")
        else:
            # Mostrar pr√©via para texto/markdown
            with st.expander("Ver Conte√∫do Completo", expanded=False):
                st.markdown(st.session_state.report_content)
        
        # Bot√£o de download
        if report_format == "pdf":
            mime_type = "application/pdf"
        elif st.session_state.report_filename.endswith('.txt'):
            mime_type = "text/plain"
        else:
            mime_type = "text/markdown"
        
        st.download_button(
            label="üì• Baixar Relat√≥rio",
            data=st.session_state.report_content,
            file_name=st.session_state.report_filename,
            mime=mime_type,
            type="primary"
        )
        
        # Estat√≠sticas do relat√≥rio
        if report_format == "pdf":
            st.caption(f"üìä Relat√≥rio PDF pronto para download")
        else:
            lines = len(st.session_state.report_content.split('\n'))
            chars = len(st.session_state.report_content)
            st.caption(f"üìä Relat√≥rio: {lines} linhas, {chars} caracteres")

def summarize_findings(df, memory: list) -> str:
    """Gera conclus√µes autom√°ticas a partir das an√°lises feitas."""
    model = genai.GenerativeModel("gemini-1.5-flash")

    history = "\n".join(memory)
    prompt = f"""
    Voc√™ analisou um dataset com {df.shape[0]} linhas e {df.shape[1]} colunas.
    Hist√≥rico de an√°lises anteriores: {history}

    Gere um relatorio com os itens selecionados pelo usuario na secao 'Itens para o Relat√≥rio na barra lateral',
    Siga as instru√ß√µes abaixo:
    1. Estruture o relat√≥rio com se√ß√µes claras e t√≠tulos descritivos.
    2. SE houver um aquivo .png salvo, n√£o esque√ßa de incluir o arquivo gerado em seu relatorio final.
    3. Gere conclusoes acionaveis e insights pr√°ticos baseados nos dados analisados.
    4. Use linguagem clara e objetiva, evitando jarg√µes t√©cnicos.
    """

    response = model.generate_content(prompt)
    return response.text
